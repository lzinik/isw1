

----QUIT----(28 June 2022 10:51:03) CuisUniversity-5324.image priorSource: 3389678!

----STARTUP---- (28 June 2022 10:51:03) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5324.image!


----QUIT----(28 June 2022 10:51:03) CuisUniversity-5324.image priorSource: 7600809!

----STARTUP---- (4 July 2022 17:08:25) as /Users/lzinik/personal/facultad/macos64/CuisUniversity-5324.image!


Object subclass: #LaddersAndSlides3D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections'!

!classDefinition: #LaddersAndSlides3D category: 'Collections' stamp: 'LZ 7/4/2022 17:20:22'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections'!

!classRemoval: #LaddersAndSlides3D stamp: 'LZ 7/4/2022 17:20:41'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections'!

Object subclass: #LaddersAndSlides3D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:21:03'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

TestCase subclass: #LaddersAndSlides3DTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3DTest category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:21:15'!
TestCase subclass: #LaddersAndSlides3DTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 17:28:08'!
test01ShouldRaiseWhenTryingToCreateAGameWithShortcutsThatShareAStartingPosition

	! !

Object subclass: #Shortcut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:29:10'!
Object subclass: #Shortcut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Shortcut subclass: #Ladder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Ladder category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:29:26'!
Shortcut subclass: #Ladder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:29:30'!
Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classRenamed: #Ladder as: #Slide stamp: 'LZ 7/4/2022 17:29:39'!
Smalltalk renameClassNamed: #Ladder as: #Slide!
!LaddersAndSlides3DTest class methodsFor: 'no messages' stamp: 'LZ 7/4/2022 17:31:13'!
test01ShouldRaiseWhenTryingToCreateGameWithShortcutsThatMatchStartingPositions

	| ladders |
	ladders := self! !
!LaddersAndSlides3DTest class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 17:35:39' prior: 50569275!
test01ShouldRaiseWhenTryingToCreateGameWithShortcutsThatMatchStartingPositions

	| stairs slides |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 3@3 to: 5@2) with: (Stair fromFloor: 2 toFloor: 3 startingFrom: 4@1 to: 1@2).! !
!LaddersAndSlides3DTest class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 17:38:32'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPositions

	| stairs slides |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2)! !
!LaddersAndSlides3DTest class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 17:38:40' prior: 50569294!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPositions

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2)! !

!methodRemoval: LaddersAndSlides3DTest class #test01ShouldRaiseWhenTryingToCreateGameWithShortcutsThatMatchStartingPositions stamp: 'LZ 7/4/2022 17:38:47'!
test01ShouldRaiseWhenTryingToCreateGameWithShortcutsThatMatchStartingPositions

	| stairs slides |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 3@3 to: 5@2) with: (Stair fromFloor: 2 toFloor: 3 startingFrom: 4@1 to: 1@2).!
!LaddersAndSlides3DTest class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 17:38:54'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2)! !

!methodRemoval: LaddersAndSlides3DTest class #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPositions stamp: 'LZ 7/4/2022 17:38:59'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPositions

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2)!
!LaddersAndSlides3DTest class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 17:44:52' prior: 50569326!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2).
	
	self 
		should: [
			LaddersAndSlides3D withFloors: self validFloors
							 	withPlayers: self validPlayers
								withStairs: stairs 
								withSlides: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D ! !

!classDefinition: #Floor category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:48:16'!
Object subclass: #Floor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!LaddersAndSlides3DTest class methodsFor: 'test data' stamp: 'LZ 7/4/2022 17:48:06'!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumuns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.! !
!LaddersAndSlides3DTest class methodsFor: 'test data' stamp: 'LZ 7/4/2022 17:48:39' prior: 50569371!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumuns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.! !
!Floor class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 17:49:35'!
withColumns: aNumberOfColumns withRows: aNumberOfRows

	^self new initializeWithColumns: aNumberOfColumns withRows: aNumberOfRows.! !

!classDefinition: #Floor category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:50:23'!
Object subclass: #Floor
	instanceVariableNames: 'columns'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Floor category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 17:50:26'!
Object subclass: #Floor
	instanceVariableNames: 'columns rows'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Floor methodsFor: 'initialization' stamp: 'LZ 7/4/2022 17:50:22'!
initializeWithColumns: aNumberOfColumns withRows: aNumberOfRows

	columns := aNumberOfColumns.
	rows := aNumberOfRows.! !
!Floor methodsFor: 'accesing' stamp: 'LZ 7/4/2022 17:50:43'!
columns

	^ columns.! !
!Floor methodsFor: 'accesing' stamp: 'LZ 7/4/2022 17:50:46'!
rows

	^ rows.! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 17:51:33'!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumuns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 17:51:39' prior: 50569424!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.! !

!methodRemoval: LaddersAndSlides3DTest class #validFloors stamp: 'LZ 7/4/2022 17:51:50'!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumuns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 17:52:59'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2).
	
	self 
		should: [
			LaddersAndSlides3D withFloors: self validFloors
							 	withPlayers: self validPlayers
								withStairs: stairs 
								withSlides: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D ! !

!methodRemoval: LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateAGameWithShortcutsThatShareAStartingPosition stamp: 'LZ 7/4/2022 17:53:04'!
test01ShouldRaiseWhenTryingToCreateAGameWithShortcutsThatShareAStartingPosition

	!

!methodRemoval: LaddersAndSlides3DTest class #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 17:54:02'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs |
	
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2).
	
	self 
		should: [
			LaddersAndSlides3D withFloors: self validFloors
							 	withPlayers: self validPlayers
								withStairs: stairs 
								withSlides: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D !
!Shortcut class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 17:56:57'!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.! !

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:27'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:28'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startFloor endFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:29'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startFloor endFloor startingPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:30'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startFloor endFloor startingPosition finalPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Slide methodsFor: 'initialization' stamp: 'LZ 7/4/2022 18:00:24'!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startFloor := aFloorNumber.
	endFloor := anotherFloorNumber.
	startingPosition := aStartPosition.
	finalPosition := aFinalPosition.! !

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:49'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:50'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startFloor endFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:50'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startFloor endFloor startingPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 18:00:57'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startFloor endFloor startingPosition finalPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Stair methodsFor: 'initialization' stamp: 'LZ 7/4/2022 18:00:47'!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startFloor := aFloorNumber.
	endFloor := anotherFloorNumber.
	startingPosition := aStartPosition.
	finalPosition := aFinalPosition.! !
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 18:07:06'!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	self subclassResponsibility.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:07:45'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:12:53' prior: 50569456!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	
	self 
		should: [
			LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:13:41' prior: 50569604!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:13:44'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:13:52'!
withFloors: anOrderedCollection withQuantityOfPlayers: aSmallInteger withStairs: anOrderedCollection3 withSlides: anOrderedCollection4 startingFrom: aPoint finishingAt: aPoint6 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithFloors: anOrderedCollection withQuantityOfPlayers: aSmallInteger withStairs: anOrderedCollection3 withSlides: anOrderedCollection4 startingFrom: aPoint finishingAt: aPoint6 ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:15:45' prior: 50569624!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:15:58' prior: 50569651!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:15:59'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:16:09'!
thereCanNotBeShortcutsAtStartOrFinishPositionError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:16:27' prior: 50569711!
thereCanNotBeShortcutsAtStartOrFinishPositionError
	
	^ 'There can not be a shortcut on starting or finishing position'! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:16:28'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:16:41' prior: 50569669!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| stairs startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:16:43'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:16:43'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:17:57'!
test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| stairs startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:18:08' prior: 50569762!
test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides  |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:18:14' prior: 50569789!
test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:19:43' prior: 50569729!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:19:48' prior: 50569843!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:19:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:19:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:19:50'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:20:19'!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:20:22' prior: 50569911!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:20:59'!
testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!methodRemoval: LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:20:59'!
test01ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:21:05'!
testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!methodRemoval: LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:21:05'!
test02ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:21:12'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:21:12'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:21:12'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:21:12'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:21:25' prior: 50569934!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairs! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:21:26'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:21:33' prior: 50570084!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsError! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:21:34'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:21:38'!
canNotCreateGameWithoutStairsError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:21:48' prior: 50570136!
canNotCreateGameWithoutStairsError
	
	^ 'Can not create game without stairs'! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:21:51'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:22:34' prior: 50569694!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	aCollectionOfStairs isEmpty: [self error: self canNotCreateGameWithoutStairsError ]

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:22:38' prior: 50570152!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	aCollectionOfStairs isEmpty: [self error: self canNotCreateGameWithoutStairsError ].

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:22:47' prior: 50570167!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	(aCollectionOfStairs) isEmpty: [self error: self canNotCreateGameWithoutStairsError ].

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:23:01' prior: 50570182!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:23:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:23:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:23:02'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:23:22'!
test02ShouldRaiseWhenTryingToCreateGameWithoutSlides

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:23:55' prior: 50570225!
test02ShouldRaiseWhenTryingToCreateGameWithoutSlides

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutSlidesError! !

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:23:58'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:24:04'!
canNotCreateGameWithoutSlidesError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:24:11' prior: 50570274!
canNotCreateGameWithoutSlidesError
	
	^ 'Can not create game without slides'! !
!LaddersAndSlides3D class methodsFor: 'error descriptions' stamp: 'LZ 7/4/2022 18:24:30' prior: 50570280!
canNotCreateGameWithoutSlidesError
	
	^ 'Can not create game without slides'.! !

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:24:35'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:25:02' prior: 50570197!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ].

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:25:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:25:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:25:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:25:03'!
PASSED!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:25:33'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:25:33' prior: 50570296!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:26:14'!
canNotCreateGameWithoutSlidesErrorSignal
	
	self error: self canNotCreateGameWithoutSlidesError.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:26:20'!
canNotCreateGameWithoutStairsErrorSignal
	
	self error: self canNotCreateGameWithoutStairsError.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:26:33'!
thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal
	
	self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError .! !

----SNAPSHOT----(4 July 2022 18:27:12) CuisUniversity-5324.image priorSource: 7601032!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:27:35'!
test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!methodRemoval: LaddersAndSlides3DTest #testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:27:35'!
testxxShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:27:43'!
test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!methodRemoval: LaddersAndSlides3DTest #testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:27:43'!
testyyShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:28:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:28:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:28:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:28:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:28:32'!
PASSED!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:29:22'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint 

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]! !
!LaddersAndSlides3D class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 18:29:22' prior: 50570343!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!methodRemoval: LaddersAndSlides3D class #assertAreValidSlides:andStairs: stamp: 'LZ 7/4/2022 18:29:22'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:29:52'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint aFinishingPoint: finishingAt  

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]! !
!LaddersAndSlides3D class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 18:29:52' prior: 50570524!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint aFinishingPoint: finishingAt.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!methodRemoval: LaddersAndSlides3D class #assertAreValidSlides:andStairs:startingFrom: stamp: 'LZ 7/4/2022 18:29:52'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint 

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 18:30:07' prior: 50570564!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: aFinishingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:30:18'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]! !

!methodRemoval: LaddersAndSlides3D class #assertAreValidSlides:andStairs:startingFrom:aFinishingPoint: stamp: 'LZ 7/4/2022 18:30:18'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint aFinishingPoint: finishingAt  

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:30:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:30:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:30:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:30:46'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:33:24'!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPosition! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:33:27'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:33:32'!
thereCanNotBeShortcutsThatShareTheSameStartingPosition
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:33:53' prior: 50570688!
thereCanNotBeShortcutsThatShareTheSameStartingPosition
	
	^ 'There cannot be shortcuts that share the starting position'.! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:33:55'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:35:41' prior: 50570609!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	aCollectionOfStairs collect: [ :aStair | aStair startingPosition ].	

	aCollectionOfStairs isEmpty ifTrue: [self error: self canNotCreateGameWithoutStairsError ].
	aCollectionOfSlides isEmpty ifTrue: [self error: self canNotCreateGameWithoutSlidesError ]! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:35:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:35:44'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:35:44'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:35:44'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:35:44'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:37:37' prior: 50570706!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	((aCollectionOfStairs first) initialPosition = (aCollectionOfStairs second) initialPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].

	aCollectionOfStairs isEmpty ifTrue: [ self canNotCreateGameWithoutStairsErrorSignal ].
	aCollectionOfSlides isEmpty ifTrue: [ self canNotCreateGameWithoutSlidesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:37:51'!
thereCanNotBeShortcutsThatShareTheSameStartingPositionError
	
	^ 'There cannot be shortcuts that share the starting position'.! !
!LaddersAndSlides3DTest methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 18:37:51' prior: 50570654!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!methodRemoval: LaddersAndSlides3D class #thereCanNotBeShortcutsThatShareTheSameStartingPosition stamp: 'LZ 7/4/2022 18:37:51'!
thereCanNotBeShortcutsThatShareTheSameStartingPosition
	
	^ 'There cannot be shortcuts that share the starting position'.!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:38:07'!
thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal
	
	self error: self thereCanNotBeShortcutsThatShareTheSameStartingPositionError ! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:38:07' prior: 50570807!
thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal
	
	self error: self thereCanNotBeShortcutsThatShareTheSameStartingPositionError.! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 18:39:00'!
startingPosition

	self subclassResponsibility.! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 18:39:21' overrides: 50570822!
startingPosition

	^ startingPosition.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:40:07' prior: 50570744!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	((aCollectionOfStairs first) startingPosition = (aCollectionOfStairs second) startingPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].

	aCollectionOfStairs isEmpty ifTrue: [ self canNotCreateGameWithoutStairsErrorSignal ].
	aCollectionOfSlides isEmpty ifTrue: [ self canNotCreateGameWithoutSlidesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:40:08'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:40:08'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:40:08'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:40:08'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:40:08'!
PASSED!

----SNAPSHOT----(4 July 2022 18:40:14) CuisUniversity-5324.image priorSource: 7639204!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:40:24'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:41:20' prior: 50570832!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	(aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ].

	((aCollectionOfStairs first) startingPosition = (aCollectionOfStairs second) startingPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!methodRemoval: LaddersAndSlides3D class #canNotCreateGameWithoutStairsError stamp: 'LZ 7/4/2022 18:41:30'!
canNotCreateGameWithoutStairsError
	
	^ 'Can not create game without stairs'!

!methodRemoval: LaddersAndSlides3D class #canNotCreateGameWithoutStairsErrorSignal stamp: 'LZ 7/4/2022 18:41:31'!
canNotCreateGameWithoutStairsErrorSignal
	
	self error: self canNotCreateGameWithoutStairsError.!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:41:44'!
canNotCreateGameWithoutStairsOrSlidesErrorSignal
	
	self error: self canNotCreateGameWithoutStairsOrSlidesError.! !

!methodRemoval: LaddersAndSlides3D class #canNotCreateGameWithoutSlidesErrorSignal stamp: 'LZ 7/4/2022 18:41:51'!
canNotCreateGameWithoutSlidesErrorSignal
	
	self error: self canNotCreateGameWithoutSlidesError.!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 18:42:02'!
canNotCreateGameWithoutStairsOrSlidesError
	
	^ 'Can not create game without slides'.! !
!LaddersAndSlides3DTest methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 18:42:02' prior: 50570248!
test02ShouldRaiseWhenTryingToCreateGameWithoutSlides

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsOrSlidesError! !

!methodRemoval: LaddersAndSlides3D class #canNotCreateGameWithoutSlidesError stamp: 'LZ 7/4/2022 18:42:02'!
canNotCreateGameWithoutSlidesError
	
	^ 'Can not create game without slides'.!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:42:22' prior: 50570110!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsOrSlidesError ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:42:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:42:28'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:42:28'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:42:28'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:42:28'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:42:28'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:42:28'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:42:36'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:42:58'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:45:01' prior: 50570880!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	(aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ].


	((aCollectionOfStairs first) startingPosition = (aCollectionOfStairs second) startingPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:45:09' prior: 50571021!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	(aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ].

	((aCollectionOfStairs first) startingPosition = (aCollectionOfStairs second) startingPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:45:25'!
assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides

	^ (aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:45:25' prior: 50571038!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	((aCollectionOfStairs first) startingPosition = (aCollectionOfStairs second) startingPosition) ifTrue: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:48:33' prior: 50571065!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositions |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositions := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositions into: [ :startingPositions :aStair | startingPositions add: aStair startingPosition. startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositions size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:48:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:48:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:48:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:48:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:48:34'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:48:50' prior: 50570770!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@2 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:48:51'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:49:08'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:49:41' prior: 50571125!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:49:42'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:49:59'!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 18:51:21'!
validStairs

	| stair1 stair2 |
	stair1 := Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2.
	stair2 := Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4.
	
	^ OrderedCollection with: stair1 with: stair2.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:51:41' prior: 50571220!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:51:48' prior: 50571259!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:52:10' prior: 50571164!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:53:15' prior: 50571284!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2)  with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2)..
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:53:22' prior: 50571308!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:53:23'!
PASSED!
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 18:53:43'!
startingFloor

	^ startFloor .! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 18:54:03'!
finishingFloor

	^ self! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 18:54:12' prior: 50571427!
finishingFloor

	^ endFloor.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:56:25' prior: 50571081!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositions |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositions := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositions into: [ :startingPositions :aStair | startingPositions add: (aStair startingFloor, aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositions size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:56:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:56:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:56:26'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:56:26'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:56:26'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:56:26'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:56:41' prior: 50571436!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositions |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositions := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositions into: [ :startingPositions :aStair | startingPositions add: {aStair startingFloor, aStair startingPosition}. startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositions size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:56:43'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:56:43'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:56:43'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:56:43'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:56:43'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:56:43'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:57:36' prior: 50571486!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | startingPositions add: aStair startingPosition. startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

----SNAPSHOT----(4 July 2022 18:57:48) CuisUniversity-5324.image priorSource: 7655097!

----End fileIn of /Users/lzinik/personal/facultad/macos64/Packages/TerseGuide.pck.st----!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 18:58:28' prior: 50571536!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:29'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:58:40' prior: 50571364!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:40'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:58:54' prior: 50574533!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 2 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:58:55'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:58:59' prior: 50574594!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 18:59:53' prior: 50571337!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 3@2)
							with: (Slide fromFloor: 3 toFloor: 1 startingFrom: 2@1 to: 1@4)..
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 18:59:56'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 19:00:50' prior: 50571249!
validStairs

	| stair1 stair2 |
	stair1 := Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2.
	stair2 := Stair fromFloor: 2 toFloor: 3 startingFrom: 2@3 to: 5@1.
	
	^ OrderedCollection with: stair1 with: stair2.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:01:48' prior: 50574657!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 3@2)
							with: (Slide fromFloor: 3 toFloor: 1 startingFrom: 2@1 to: 1@4)..
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:01:48'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:02:28' prior: 50574482!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors slidesStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].
	
	slidesStartingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfSlides size = slidesStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:02:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:02:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:02:32'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:02:32'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:02:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:02:32'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:02:39'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:02:39'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:02:39'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:02:39'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:02:39'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:02:39'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:02:57'!
ERROR!

!methodRemoval: Stair #finishingFloor stamp: 'LZ 7/4/2022 19:03:08'!
finishingFloor

	^ endFloor.!
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 19:03:32' overrides: 50570822!
startingPosition

	^ startingPosition.! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 19:03:57'!
startingFloor

	^ startFloor .! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:04:01'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:04:16' prior: 50574725!
test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 3@2)
							with: (Slide fromFloor: 3 toFloor: 1 startingFrom: 2@1 to: 1@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:04:18'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:05:53'!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 3@2)
							with: (Slide fromFloor: 3 toFloor: 1 startingFrom: 2@1 to: 1@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 19:07:10'!
validSlides

	| slide1 slide2 |
	slide1 := Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3.
	slide2 := Slide fromFloor: 2 toFloor: 1 startingFrom: 1@4 to: 7@3.
	
	^ OrderedCollection with: slide1 with: slide2 .! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 19:07:11' prior: 50574975!
validSlides

	| slide1 slide2 |
	slide1 := Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3.
	slide2 := Slide fromFloor: 2 toFloor: 1 startingFrom: 1@4 to: 7@3.
	
	^ OrderedCollection with: slide1 with: slide2.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:07:48' prior: 50570958!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: self validSlides 
								startingFrom: startingPosition
								finishingAt: finalPosition
							]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsOrSlidesError ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:07:53' prior: 50574995!
test01ShouldRaiseWhenTryingToCreateGameWithoutStairs

	| startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: OrderedCollection new 
								withSlides: self validSlides 
								startingFrom: startingPosition
								finishingAt: finalPosition
							]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsOrSlidesError ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:08:08' prior: 50570929!
test02ShouldRaiseWhenTryingToCreateGameWithoutSlides

	| startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: OrderedCollection new
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D canNotCreateGameWithoutStairsOrSlidesError! !

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:08:10'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:08:29' prior: 50570379!
test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: startingPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:08:31'!
PASSED!

----SNAPSHOT----(4 July 2022 19:08:36) CuisUniversity-5324.image priorSource: 7677039!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:08:48' prior: 50570434!
test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:09:04' prior: 50574628!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:09:11'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:10:34' prior: 50574949!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:10:40'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:10:45'!
shortcutIsOutOfBoundariesError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:11:00' prior: 50575238!
shortcutIsOutOfBoundariesError
	
	^ 'Shortcut is out of boundaries'.! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:11:05'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:12:29' prior: 50574756!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors slidesStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].
	
	slidesStartingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfSlides size = slidesStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:13:29'!
assertNoStairsMatchStartingPosition: aCollectionOfStairs

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:17'!
assertNoSlidesMatchStartingPosition: aCollectionOfSlides

	| slidesStartingPositionsAndFloors |

	slidesStartingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesStartingPositionsAndFloors into: [ :startingPositions :aSlide | 
		startingPositions add: (aSlide startingFloor -> aSlide startingPosition). startingPositions ].
	
	aCollectionOfSlides size = slidesStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:40' prior: 50575254!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors slidesStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:47' prior: 50575329!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:15:34'!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:15:47' prior: 50575360!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| shortcutStartingPositionsAndFloors |

	shortcutStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: shortcutStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = shortcutStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:16:10' prior: 50575291!
assertNoStairsMatchStartingPosition: aCollectionOfStairs

	self assertNoShortcutsMatchStartingPosition: aCollectionOfStairs.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:16:21' prior: 50575310!
assertNoSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoShortcutsMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:19'!
assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:39' prior: 50575346!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:40' prior: 50575425!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:18:05'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:45' prior: 50575438!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:53' prior: 50575456!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:56' prior: 50575469!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:19:05'!
assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides

	^ (aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ]! !

!methodRemoval: LaddersAndSlides3D class #assertAreNotEmptyStairs:andSlides: stamp: 'LZ 7/4/2022 19:19:05'!
assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides

	^ (aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ]!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:19:57'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: withFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 19:19:57' prior: 50570593!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!methodRemoval: LaddersAndSlides3D class #assertAreValidSlides:andStairs:startingFrom:finishingAt: stamp: 'LZ 7/4/2022 19:19:57'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:20:04' prior: 50575515!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:20:19' prior: 50575560!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:21:01'!
shortcutIsOutOfBoundariesErrorSignal
	
	self error: self shortcutIsOutOfBoundariesError.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:24:10' prior: 50575574!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x) <= ((aCollectionOfFloors at: aStair startingFloor) columns)
			
		]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:25:53' prior: 50575594!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns)
	]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:26:32' prior: 50575612!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows )
	]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:27:12' prior: 50575631!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows )) ifTrue: [ self shortcutIsOutOfBoundariesError]
	]! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:27:14'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:27:14'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:27:14'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:27:42'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:29:38' prior: 50575654!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	])  ifTrue: [ self shortcutIsOutOfBoundariesError].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:29:40' prior: 50575721!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:29:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:29:40'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:29:40'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:30:26' prior: 50575210!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 2@4 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:30:27'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:30:33' prior: 50575808!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:31:46'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:32:20'!
PASSED!

----STARTUP---- (4 July 2022 19:33:51) as /Users/lzinik/personal/facultad/macos64/CuisUniversity-5324.image!

!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:08:48' prior: 50570434!
test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:09:04' prior: 50574628!
test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection 
				with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@1 to: 3@2)
				with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 1@1 to: 2@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsThatShareTheSameStartingPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:10:34' prior: 50574949!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:10:45'!
shortcutIsOutOfBoundariesError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:11:00' prior: 50575946!
shortcutIsOutOfBoundariesError
	
	^ 'Shortcut is out of boundaries'.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:12:29' prior: 50574756!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors slidesStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].
	
	slidesStartingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfSlides size = slidesStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:13:29'!
assertNoStairsMatchStartingPosition: aCollectionOfStairs

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	aCollectionOfStairs size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:17'!
assertNoSlidesMatchStartingPosition: aCollectionOfSlides

	| slidesStartingPositionsAndFloors |

	slidesStartingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesStartingPositionsAndFloors into: [ :startingPositions :aSlide | 
		startingPositions add: (aSlide startingFloor -> aSlide startingPosition). startingPositions ].
	
	aCollectionOfSlides size = slidesStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:40' prior: 50575957!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  

	| stairsStartingPositionsAndFloors slidesStartingPositionsAndFloors |
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:14:47' prior: 50576032!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:15:34'!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = stairsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:15:47' prior: 50576063!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| shortcutStartingPositionsAndFloors |

	shortcutStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: shortcutStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = shortcutStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:16:10' prior: 50575994!
assertNoStairsMatchStartingPosition: aCollectionOfStairs

	self assertNoShortcutsMatchStartingPosition: aCollectionOfStairs.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:16:21' prior: 50576013!
assertNoSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoShortcutsMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:19'!
assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:39' prior: 50576049!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:17:40' prior: 50576128!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt  
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:45' prior: 50576141!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt
	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.

	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:53' prior: 50576154!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:18:56' prior: 50576167!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:19:05'!
assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides

	^ (aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ]! !

!methodRemoval: LaddersAndSlides3D class #assertAreNotEmptyStairs:andSlides: stamp: 'LZ 7/4/2022 19:34:28'!
assertAreNotEmptyStairs: aCollectionOfStairs andSlides: aCollectionOfSlides

	^ (aCollectionOfStairs isEmpty or: aCollectionOfSlides isEmpty) ifTrue: [ self canNotCreateGameWithoutStairsOrSlidesErrorSignal ]!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:19:57'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: withFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 19:19:57' prior: 50570593!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !

!methodRemoval: LaddersAndSlides3D class #assertAreValidSlides:andStairs:startingFrom:finishingAt: stamp: 'LZ 7/4/2022 19:34:28'!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:20:04' prior: 50576213!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:20:19' prior: 50576258!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 19:21:01'!
shortcutIsOutOfBoundariesErrorSignal
	
	self error: self shortcutIsOutOfBoundariesError.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:24:10' prior: 50576272!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x) <= ((aCollectionOfFloors at: aStair startingFloor) columns)
			
		]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:25:53' prior: 50576292!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns)
	]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:26:32' prior: 50576310!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		(aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows )
	]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:27:12' prior: 50576329!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	aCollectionOfStairs do: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows )) ifTrue: [ self shortcutIsOutOfBoundariesError]
	]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:29:38' prior: 50576352!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	])  ifTrue: [ self shortcutIsOutOfBoundariesError].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:29:40' prior: 50576377!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError].! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:30:26' prior: 50575923!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 2@4 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:30:33' prior: 50576427!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:34:34'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:34:34'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:34:34'!
FAILURE!

----SNAPSHOT----(4 July 2022 19:34:42) CuisUniversity-5324.image priorSource: 7792020!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:35:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:35:19'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:35:19'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:35:31' prior: 50576450!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	"self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError"! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:35:35'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:35:49' prior: 50576551!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:36:05'!
PASSED!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:36:26' prior: 50576402!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:36:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:36:26'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:36:26'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:36:55'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:37:28'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:37:49'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:37:49'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:37:49'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:37:49'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:37:49'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:37:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:37:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:37:50'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:37:50'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:38:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:38:59'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:38:59'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:39:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:39:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:39:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:39:02'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:39:03'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:39:03'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:39:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:39:12'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:39:46' prior: 50576612!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@3 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:39:48'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:40:00'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 19:40:59' prior: 50576848!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@3 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:40:59'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 19:41:59' prior: 50576227!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:42:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:42:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:42:01'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:42:01'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:42:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:42:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:42:01'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 19:42:11' prior: 50576910!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError
	! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 19:42:13' prior: 50576958!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.

	^ self error: self thereCanNotBeShortcutsAtStartOrFinishPositionError.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:43:54' prior: 50576640!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:45:07'!
assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint

	self assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint.
	self assertNoSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:46:08'!
assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint

	self assertNoShortcutFrom: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:48:25' prior: 50576993!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: finishingAt

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:49:11' prior: 50577043!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint.
	self assertNoSlides: aCollectionOfStairs matchWithGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.
	
	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:50:16' prior: 50577034!
assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint

	(aCollectionOfStairs anySatisfy: [ :aStair | aStair startingPosition = aStartingPoint ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:52:18' prior: 50577071!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint orFinishingPosition: aFinishingPoint.

	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:53:24'!
assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint orFinishingPosition: aFinishingPoint.

	self assertNoShortcut: aCollectionOfStairs matchWith: aStartingPoint orWith: aFinishingPoint.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:55:09'!
assertNoShortcut: aCollectionOfStairs matchWith: aStartingPoint orWith: aFinishingPoint
! !

!methodRemoval: LaddersAndSlides3D class #assertNoShortcut:matchWith:orWith: stamp: 'LZ 7/4/2022 19:55:15'!
assertNoShortcut: aCollectionOfStairs matchWith: aStartingPoint orWith: aFinishingPoint
!

!methodRemoval: LaddersAndSlides3D class #assertNoShortcutsMatchStartingPosition: stamp: 'LZ 7/4/2022 19:55:22'!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| shortcutStartingPositionsAndFloors |

	shortcutStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: shortcutStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = shortcutStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:16:21' prior: 50576111!
assertNoSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoShortcutsMatchStartingPosition: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:56:49'!
assertNoShortcutsMatchStartingPosition: aCollectionOfShortcuts

	| shortcutsStartingPositionsAndFloors |

	shortcutsStartingPositionsAndFloors := Set new.
	
	aCollectionOfShortcuts inject: shortcutsStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	aCollectionOfShortcuts size = shortcutsStartingPositionsAndFloors size ifFalse: [ self thereCanNotBeShortcutsThatShareTheSameStartingPositionErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:56:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:56:50'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:56:50'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:56:50'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:56:50'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:56:50'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:56:50'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 19:57:47' prior: 50577113!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint orFinishingPosition: aFinishingPoint.
	self assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides.

	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 19:57:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 19:57:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 19:57:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 19:57:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:57:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 19:57:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 19:57:48'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:00:22'!
assertNoSlides: aCollectionOfSlides finishInGameFinishingPosition: aFinishingPosition

	(aCollectionOfSlides anySatisfy: [ :aSlide | aSlide finishingPosition = aFinishingPosition ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]! !

!methodRemoval: LaddersAndSlides3D class #assertNoStairs:orSlides:matchWithGameStartingPosition: stamp: 'LZ 7/4/2022 20:00:33'!
assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint

	self assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint.
	self assertNoSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint.!

!methodRemoval: LaddersAndSlides3D class #assertNoStairs:orSlides:matchWithGameStartingPosition:orFinishingPosition: stamp: 'LZ 7/4/2022 20:00:39'!
assertNoStairs: aCollectionOfStairs orSlides: aCollectionOfSlides matchWithGameStartingPosition: aStartingPoint orFinishingPosition: aFinishingPoint.

	self assertNoShortcut: aCollectionOfStairs matchWith: aStartingPoint orWith: aFinishingPoint.!

!methodRemoval: LaddersAndSlides3D class #assertNoStairs:orSlidesMatchStartingPosition: stamp: 'LZ 7/4/2022 20:00:43'!
assertNoStairs: aCollectionOfStairs orSlidesMatchStartingPosition: aCollectionOfSlides

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides.!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:02:55' prior: 50577243!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides finishInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.

	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:03:30'!
assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint

	(aCollectionOfStairs anySatisfy: [ :aSlide | aSlide startingPosition = aStartingPoint ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]! !

!methodRemoval: LaddersAndSlides3D class #assertNoStairs:matchWithGameStartingPosition: stamp: 'LZ 7/4/2022 20:03:43'!
assertNoStairs: aCollectionOfStairs matchWithGameStartingPosition: aStartingPoint

	(aCollectionOfStairs anySatisfy: [ :aStair | aStair startingPosition = aStartingPoint ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:04:40'!
assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides

	self assertNoStairsMatchStartingPosition: aCollectionOfStairs.
	self assertNoSlidesMatchStartingPosition: aCollectionOfSlides ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:04:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:04:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:04:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:04:41'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:04:41'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:04:41'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:04:41'!
ERROR!
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:05:02'!
finishingPosition

	^ finalPosition .! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:03'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:03'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:10'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:10'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:10'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:18'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:20'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:22'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:23'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:26'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:26'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:05:34' prior: 50576881!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 20:05:40' prior: 50576976!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.
! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 20:05:41' prior: 50577588!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:41'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:41'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:45'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:45'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:45'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:45'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:45'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:45'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:45'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:05:58'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:05:58'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:05:58'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:05:58'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:58'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:05:58'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:05:58'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:06:00'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:06:36'!
assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPosition

	(aCollectionOfSlides anySatisfy: [ :aSlide | aSlide finishingPosition = aFinishingPosition ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]! !
!LaddersAndSlides3D class methodsFor: 'as yet unclassified' stamp: 'LZ 7/4/2022 20:06:36' prior: 50577353!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.

	"(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesError]."! !

!methodRemoval: LaddersAndSlides3D class #assertNoSlides:finishInGameFinishingPosition: stamp: 'LZ 7/4/2022 20:06:36'!
assertNoSlides: aCollectionOfSlides finishInGameFinishingPosition: aFinishingPosition

	(aCollectionOfSlides anySatisfy: [ :aSlide | aSlide finishingPosition = aFinishingPosition ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:06:40' prior: 50577719!
assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPosition

	(aCollectionOfSlides anySatisfy: [ :aSlide | aSlide startingPosition = aFinishingPosition ]) ifTrue: [self thereCanNotBeShortcutsAtStartOrFinishPositionErrorSignal ]! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:06:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:06:41'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:06:41'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:07:16' prior: 50577731!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.

	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:07:19'!
PASSED!

----SNAPSHOT----(4 July 2022 20:07:27) CuisUniversity-5324.image priorSource: 7835494!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:07:55'!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@3 to: 100@100).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:07:55'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:09:02' prior: 50577823!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides.

	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:09:49'!
assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors

	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:09:54' prior: 50577918!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.

	(aCollectionOfStairs anySatisfy: [ :aStair |
		((aStair startingPosition x < 1) or:
		(aStair startingPosition x) > ((aCollectionOfFloors at: aStair startingFloor) columns) or: 
		(aStair startingPosition y < 1) or:
		(aStair startingPosition y) > ((aCollectionOfFloors at: aStair startingFloor) rows ))
	]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:10:01' prior: 50577971!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:15:45'!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		(self assertInitialFloorExists: aShortcut startingFloor) or:
		(self assertFinishingFloorExists: aShortcut finishingFloor) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		self assertFinalPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:17:52' prior: 50578030!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		(self assertIsValidInitialFloor: aShortcut startingFloor from: aCollectionOfFloors ) or:
		(self assertFinishingFloorExists: aShortcut finishingFloor from: aCollectionOfFloors) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		self assertFinalPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:19:08'!
assertIsValidFloor: aFloor from: aCollectionOfFloors

	^ (aFloor >= 1) and: (aFloor <= aCollectionOfFloors size).! !

!methodRemoval: LaddersAndSlides3D class #assertIsValidFloor:from: stamp: 'LZ 7/4/2022 20:19:35'!
assertIsValidFloor: aFloor from: aCollectionOfFloors

	^ (aFloor >= 1) and: (aFloor <= aCollectionOfFloors size).!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:20:25' prior: 50578050!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut initialFloor >= 1) and: (aShortcut initialFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		self assertFinalPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:21:02'!
startingFloor

	self subclassResponsibility.! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:21:06'!
finishingFloor

	self subclassResponsibility.! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:21:31' overrides: 50578110!
finishingFloor

	^ endFloor .! !

!methodRemoval: Slide #finishingPosition stamp: 'LZ 7/4/2022 20:21:42'!
finishingPosition

	^ finalPosition .!
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:21:44' overrides: 50578110!
finishingFloor

	^ endFloor .! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:22:06'!
test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!methodRemoval: LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:22:06'!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:22:19' prior: 50578085!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		self assertFinalPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:23:27'!
assertInitialPositionOf: aShortcut isOutOfBoundariesOf: aCollectionOfFloors

	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:25:22' prior: 50578197!
assertInitialPositionOf: aShortcut isOutOfBoundariesOf: aFloor

	^ (aShortcut startingPosition x < 1) 
		or: (aShortcut startingPosition x) > aFloor columns
		or: (aShortcut startingPosition y < 1)
		or: (aShortcut startingPosition y) > aFloor rows
	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:25:43'!
assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: aFloor

	^ (aShortcut finishingPosition x < 1) 
		or: (aShortcut finishingPosition x) > aFloor columns
		or: (aShortcut finishingPosition y < 1)
		or: (aShortcut finishingPosition y) > aFloor rows
	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:26:38'!
assertPosition: aPosition isOutOfBoundariesOf: aFloor

	^ (aPosition < 1) 
		or: (aPosition) > aFloor columns
		or: (aPosition < 1)
		or: (aPosition > aFloor rows)! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:27:35' prior: 50578203!
assertInitialPositionOf: aShortcut isOutOfBoundariesOf: aFloor

	^ self assertPosition: aShortcut startingPosition isOutOfBoundariesOf: aFloor.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:27:47' prior: 50578225!
assertPosition: aPosition isOutOfBoundariesOf: aFloor

	^ (aPosition x< 1) 
		or: (aPosition x) > aFloor columns
		or: (aPosition y < 1)
		or: (aPosition y > aFloor rows)! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:28:11' prior: 50578214!
assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: aFloor

	^ self assertPosition: aShortcut finishingPosition isOutOfBoundariesOf: aFloor.
	! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:28:32'!
finishingPosition

	self subclassResponsibility.! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:28:40' overrides: 50578258!
finishingPosition

	^ finalPosition .! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 20:28:49' overrides: 50578258!
finishingPosition

	^ finalPosition.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:30:09' prior: 50578175!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:30:19' prior: 50578272!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:30:55' prior: 50577952!
assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors

	self assertNoShortcuts: aCollectionOfStairs areOutOfBoundariesOf: aCollectionOfFloors ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:31:05' prior: 50578316!
assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors

	self assertNoShortcuts: aCollectionOfStairs areOutOfBoundariesOf: aCollectionOfFloors.
	self assertNoShortcuts: aCollectionOfSlides areOutOfBoundariesOf: aCollectionOfFloors ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:31:50' prior: 50578294!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor columns))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:31:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:31:52'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:31:52'!
ERROR!

----SNAPSHOT----(4 July 2022 20:31:56) CuisUniversity-5324.image priorSource: 7879527!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:31:59'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:31:59'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:31:59'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:32:08'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:32:41' prior: 50578326!
assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors

	self assertNoShortcuts: aCollectionOfStairs areOutOfBoundariesOf: aCollectionOfFloors.
	self assertNoShortcuts: aCollectionOfSlides areOutOfBoundariesOf: aCollectionOfFloors. ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:33:35' prior: 50578339!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:34:27' prior: 50578456!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut startingFloor)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aShortcut finishingFloor))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:34:29'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:29'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:29'!
ERROR!

----SNAPSHOT----(4 July 2022 20:34:32) CuisUniversity-5324.image priorSource: 7895897!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:34:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:41'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:41'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:46'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:34:54'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:35:38' prior: 50578242!
assertPosition: aPosition isOutOfBoundariesOf: aFloor

	^ (aPosition x< 1) 
		or: (aPosition x) > (aFloor columns)
		or: (aPosition y < 1)
		or: (aPosition y > (aFloor rows))! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:35:38'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:35:38'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:35:38'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:35:46'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:35:46'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:35:46'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:35:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:36:27'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:37:06' prior: 50578478!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor >= 1) and: (aShortcut startingFloor <= aCollectionOfFloors size)) or:
		((aShortcut finishingFloor >= 1) and: (aShortcut finishingFloor <= aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut startingFloor)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut finishingFloor))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:37:08'!
PASSED!

----SNAPSHOT----(4 July 2022 20:37:11) CuisUniversity-5324.image priorSource: 7900330!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:37:42'!
test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@3 to: 100@100).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!methodRemoval: LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:37:42'!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 1@3 to: 100@100).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:37:55'!
test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!methodRemoval: LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:37:55'!
test08ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:38:15'!
test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 100 toFloor: 2 startingFrom: 1@3 to: 2@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:38:16'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:39:02' prior: 50578680!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor < 1) and: (aShortcut startingFloor > aCollectionOfFloors size)) or:
		((aShortcut finishingFloor < 1) and: (aShortcut finishingFloor > aCollectionOfFloors size)) or:
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut startingFloor)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut finishingFloor))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:39:03'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:39:03'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:39:03'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:41:31' prior: 50578006!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesStartOrEndInInvalidFloors: aCollectionOfSlides ofFloors: aCollectionOfFloors.
	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:42:08'!
assertNoStairs: aCollectionOfStairs orSlidesStartOrEndInInvalidFloors: aCollectionOfSlides ofFloors: aCollectionOfFloors

	self assertNoShortcuts: aCollectionOfStairs startOrEndInInvalidFloors: aCollectionOfFloors.
	self assertNoShortcuts: aCollectionOfSlides startOrEndInInvalidFloors: aCollectionOfFloors. ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:42:23'!
assertNoShortcuts: aCollectionOfShortcuts startOrEndInInvalidFloors: aCollectionOfFloors

	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:43:12' prior: 50578977!
assertNoShortcuts: aCollectionOfShortcuts startOrEndInInvalidFloors: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor < 1) and: (aShortcut startingFloor > aCollectionOfFloors size)) or:
		((aShortcut finishingFloor < 1) and: (aShortcut finishingFloor > aCollectionOfFloors size))]) ifTrue: [ self shortcutFloorIsInvalidSignal ].! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 20:43:33'!
shortcutFloorIsInvalidErrorSignal
	
	self error: self shortcutFloorIsInvalidError.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 20:43:44'!
shortcutFloorIsInvalidError
	
	^ 'Shortcut floor is invalid'.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:43:59' prior: 50578866!
assertNoShortcuts: aCollectionOfShortcuts areOutOfBoundariesOf: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		(self assertInitialPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut startingFloor)) or:
		(self assertFinishingPositionOf: aShortcut isOutOfBoundariesOf: (aCollectionOfFloors at: aShortcut finishingFloor))]) ifTrue: [ self shortcutIsOutOfBoundariesErrorSignal ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:44:19' prior: 50578984!
assertNoShortcuts: aCollectionOfShortcuts startOrEndInInvalidFloors: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor < 1) and: (aShortcut startingFloor > aCollectionOfFloors size)) or:
		((aShortcut finishingFloor < 1) and: (aShortcut finishingFloor > aCollectionOfFloors size))]) ifTrue: [ self shortcutFloorIsInvalidErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:44:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:44:21'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:44:21'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:44:49' prior: 50578838!
test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 100 toFloor: 2 startingFrom: 1@3 to: 2@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:44:52'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:45:28'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:45:58' prior: 50578936!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesStartOrEndInInvalidFloors: aCollectionOfSlides ofFloors: aCollectionOfFloors.
	
	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:46:04' prior: 50579123!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesStartOrEndInInvalidFloors: aCollectionOfSlides ofFloors: aCollectionOfFloors.

	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:46:43' prior: 50579028!
assertNoShortcuts: aCollectionOfShortcuts startOrEndInInvalidFloors: aCollectionOfFloors

	(aCollectionOfShortcuts anySatisfy: [ :aShortcut |
		((aShortcut startingFloor < 1) or: (aShortcut startingFloor > aCollectionOfFloors size)) or:
		((aShortcut finishingFloor < 1) or: (aShortcut finishingFloor > aCollectionOfFloors size))]) ifTrue: [ self shortcutFloorIsInvalidErrorSignal ].! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:46:43'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:46:43'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:46:44'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:47:06'!
test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 100 startingFrom: 1@3 to: 2@4).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:47:07'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:47:51'!
test07ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:47:52'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:48:23'!
test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!methodRemoval: LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:48:23'!
test07ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 1 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:48:38' prior: 50579390!
test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 100@100 to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:48:41'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:48:59'!
test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@4 to: 100@100).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:00'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:01'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:49:23'!
test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: 2@4 to: 100@100).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:49:30' prior: 50579602!
test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 1000 toFloor: 2 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutIsOutOfBoundariesError! !

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:33'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:49:40' prior: 50579625!
test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 1000 toFloor: 2 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:40'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:49:56'!
test13ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 0 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:49:56'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:50:06'!
test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 0 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!methodRemoval: LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 20:50:06'!
test13ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 0 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError !

----SNAPSHOT----(4 July 2022 20:50:10) CuisUniversity-5324.image priorSource: 7906844!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:52:58'!
test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 2 toFloor: 1 startingFrom: 2@4 to: 3@1).
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 3@1 to: 2@5).

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 20:53:16' prior: 50579884!
test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 2 toFloor: 1 startingFrom: 2@4 to: 3@1).
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 3@1 to: 2@5).

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D stairCannotStartWhereASlideFinishesError ! !

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 20:53:19'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 20:53:27'!
stairCannotStartWhereASlideFinishesError
	self shouldBeImplemented.! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 20:54:07' prior: 50579940!
stairCannotStartWhereASlideFinishesError
	
	^ 'To prevent a possible loop, a stair cannot start where a slide finishes'! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:54:45' prior: 50579151!
assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreNotEmptyStairs: aCollectionOfStairs orSlides: aCollectionOfSlides.
	self assertNoStairs: aCollectionOfStairs startAtGameStartingPosition: aStartingPoint.
	
	self assertNoSlides: aCollectionOfSlides startInGameFinishingPosition: aFinishingPoint.
	
	self assertNoStairs: aCollectionOfStairs orSlidesMatchEachOtherStartingPositions: aCollectionOfSlides.
	
	self assertNoStairs: aCollectionOfStairs orSlidesStartOrEndInInvalidFloors: aCollectionOfSlides ofFloors: aCollectionOfFloors.

	self assertNoStairs: aCollectionOfStairs orSlidesAreOutOfBoundaries: aCollectionOfSlides ofFloors: aCollectionOfFloors.
	
	self assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides.! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:54:53'!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:56:32' prior: 50579983!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 20:56:57' prior: 50579989!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aShortcut | 
		startingPositions add: (aShortcut startingFloor -> aShortcut startingPosition). startingPositions ].
	
	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 21:00:26' prior: 50580004!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors slidesFinishingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	
	slidesFinishingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: slidesFinishingPositionsAndFloors into: [ :finishingPositions :aSlide | 
		finishingPositions add: (aSlide finishingFloor -> aSlide startingPosition). finishingPositions ].
	! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 21:01:23' prior: 50580019!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors slidesFinishingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	
	slidesFinishingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesFinishingPositionsAndFloors into: [ :finishingPositions :aSlide | 
		finishingPositions add: (aSlide finishingFloor -> aSlide startingPosition). finishingPositions ].
	
	(stairsStartingPositionsAndFloors intersection: slidesFinishingPositionsAndFloors) isEmpty ifTrue: [self ]
	
	! !
!LaddersAndSlides3D class methodsFor: 'errors' stamp: 'LZ 7/4/2022 21:01:44'!
stairCannotStartWhereASlideFinishesErrorSignal
	
	self error: self stairCannotStartWhereASlideFinishesError ! !
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 21:01:53' prior: 50580043!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors slidesFinishingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	
	slidesFinishingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesFinishingPositionsAndFloors into: [ :finishingPositions :aSlide | 
		finishingPositions add: (aSlide finishingFloor -> aSlide startingPosition). finishingPositions ].
	
	(stairsStartingPositionsAndFloors intersection: slidesFinishingPositionsAndFloors) isEmpty ifTrue: [self stairCannotStartWhereASlideFinishesErrorSignal]
	
	! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:02:21'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:02:21'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:02:21'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:02:41'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:03:01' prior: 50579910!
test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 2 toFloor: 1 startingFrom: 2@4 to: 3@1).
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 3@1 to: 2@3).

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D stairCannotStartWhereASlideFinishesError ! !

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:03:02'!
FAILURE!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 21:04:00' prior: 50580077!
assertNoStairs: aCollectionOfStairs startWhereASlideEnds: aCollectionOfSlides

	| stairsStartingPositionsAndFloors slidesFinishingPositionsAndFloors |

	stairsStartingPositionsAndFloors := Set new.
	
	aCollectionOfStairs inject: stairsStartingPositionsAndFloors into: [ :startingPositions :aStair | 
		startingPositions add: (aStair startingFloor -> aStair startingPosition). startingPositions ].
	
	
	slidesFinishingPositionsAndFloors := Set new.
	
	aCollectionOfSlides inject: slidesFinishingPositionsAndFloors into: [ :finishingPositions :aSlide | 
		finishingPositions add: (aSlide finishingFloor -> aSlide startingPosition). finishingPositions ].
	
	(stairsStartingPositionsAndFloors intersection: slidesFinishingPositionsAndFloors) isEmpty ifTrue: [self stairCannotStartWhereASlideFinishesErrorSignal].
	! !

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:04:29'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:04:29'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:04:40'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:04:52'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:04:52'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:05:11'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:05:35'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:05:35'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:06:44' prior: 50580186!
test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds

	| startingPosition finalPosition stairs slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 2 toFloor: 1 startingFrom: 2@2 to: 3@1).
	stairs := OrderedCollection with: (Stair fromFloor: 1 toFloor: 3 startingFrom: 3@1 to: 2@3).

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: stairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D stairCannotStartWhereASlideFinishesError ! !

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:06:47'!
PASSED!

----SNAPSHOT----(4 July 2022 21:08:52) CuisUniversity-5324.image priorSource: 7943386!

----SNAPSHOT----(4 July 2022 21:08:53) CuisUniversity-5324.image priorSource: 7959496!

----SNAPSHOT----(4 July 2022 21:08:54) CuisUniversity-5324.image priorSource: 7959584!

----SNAPSHOT----(4 July 2022 21:09:11) CuisUniversity-5324.image priorSource: 7959672!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:10:02'!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| startingPosition finalPosition stairs |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D stairCannotStartWhereASlideFinishesError ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:10:07' prior: 50580396!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| startingPosition finalPosition |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D stairCannotStartWhereASlideFinishesError ! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:10:48'!
validGame

	| startingPosition finalPosition|
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	^ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:11:12' prior: 50580416!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := self validGame.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:15:35' prior: 50580449!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := self validGame.
	
	game ! !
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:18:03' prior: 50569591!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	| endFloor finalPosition startFloor startingPosition |
	startFloor := aFloorNumber.
	endFloor := anotherFloorNumber.
	startingPosition := aStartPosition.
	finalPosition := aFinalPosition.! !
!Slide methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:18:28' prior: 50569540 overrides: 50580461!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition! !
!Slide methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:19:55'!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.! !
!Slide class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 21:20:05' overrides: 50569499!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.! !

!methodRemoval: Slide #fromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:20:36'!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.!

!methodRemoval: Slide #initializeFromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:20:36'!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition!

!methodRemoval: Stair #initializeFromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:20:41'!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startFloor := aFloorNumber.
	endFloor := anotherFloorNumber.
	startingPosition := aStartPosition.
	finalPosition := aFinalPosition.!
!Stair class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 21:20:54' overrides: 50569499!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.! !

!methodRemoval: Stair #finishingFloor stamp: 'LZ 7/4/2022 21:21:02'!
finishingFloor

	^ endFloor .!

!methodRemoval: Stair #finishingPosition stamp: 'LZ 7/4/2022 21:21:02'!
finishingPosition

	^ finalPosition.!

!methodRemoval: Stair #startingFloor stamp: 'LZ 7/4/2022 21:21:02'!
startingFloor

	^ startFloor .!

!methodRemoval: Stair #startingPosition stamp: 'LZ 7/4/2022 21:21:02'!
startingPosition

	^ startingPosition.!

!methodRemoval: Slide #finishingFloor stamp: 'LZ 7/4/2022 21:21:14'!
finishingFloor

	^ endFloor .!

!methodRemoval: Slide #finishingPosition stamp: 'LZ 7/4/2022 21:21:14'!
finishingPosition

	^ finalPosition .!

!methodRemoval: Slide #startingFloor stamp: 'LZ 7/4/2022 21:21:14'!
startingFloor

	^ startFloor .!

!methodRemoval: Slide #startingPosition stamp: 'LZ 7/4/2022 21:21:14'!
startingPosition

	^ startingPosition.!
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:21:22' prior: 50578110!
finishingFloor

! !

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:21:26'!
Shortcut subclass: #Slide
	instanceVariableNames: 'endFloor startingPosition finalPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:21:26'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startingPosition finalPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:21:26'!
Shortcut subclass: #Slide
	instanceVariableNames: 'finalPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:21:26'!
Shortcut subclass: #Slide
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:21:35'!
Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:21:58' prior: 50580461!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	| endFloor finalPosition startFloor startingPosition |
	startFloor := aFloorNumber.
	endFloor := anotherFloorNumber.
	startingPosition := aStartPosition.
	finalPosition := aFinalPosition.! !

Object subclass: #Shortcut
	instanceVariableNames: 'endFloor finalPosition startFloor startingPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:22:11'!
Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:23:08'!
Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2 startingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:23:09'!
Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2 startingFloor finishingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:23:10'!
Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2 startingFloor finishingFloor startingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:23:11'!
Object subclass: #Shortcut
	instanceVariableNames: 'endFloor2 finalPosition2 startFloor2 startingPosition2 startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:23:07' prior: 50580619!
initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aFloorNumber.
	finishingFloor := anotherFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !

Object subclass: #Shortcut
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:23:16'!
Object subclass: #Shortcut
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:23:23' prior: 50580574!
finishingFloor

	^ finishingFloor ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:23:38' prior: 50578258!
finishingPosition

	^ finishingPoint ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:23:45' prior: 50578106!
startingFloor

	^ finishingFloor ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:23:51' prior: 50580725!
startingFloor

	^ startingFloor ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:23:57' prior: 50570822!
startingPosition

	^ startingPoint ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:24:01'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:24:01'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:24:01'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:24:16' prior: 50580455!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := self validGame.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:24:28' prior: 50580816!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := self validGame.
	
	self assert: 1 equals: 1.! !

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:24:31'!
ERROR!

----SNAPSHOT----(4 July 2022 21:25:09) CuisUniversity-5324.image priorSource: 7959760!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:25:11'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:25:12'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:25:12'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:25:12'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:25:33'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:25:39'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:25:42'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:27:28' prior: 50574985!
validSlides

	| slide1 slide2 |
	slide1 := Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3.
	slide2 := Slide fromFloor: 2 toFloor: 1 startingFrom: 1@4 to: 5@3.
	
	^ OrderedCollection with: slide1 with: slide2.! !

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:27:35'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:27:35'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:28:04' prior: 50569435!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 10 withRows: 10.
	floor2 := Floor withColumns: 10 withRows: 10.
	floor3 :=	 Floor withColumns: 10 withRows: 10.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:28:05'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:28:05'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:28:05'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:28:16' prior: 50580946!
validFloors

	| floor1 floor2 floor3 |
	floor1 := Floor withColumns: 8 withRows: 3.
	floor2 := Floor withColumns: 5 withRows: 3.
	floor3 :=	 Floor withColumns: 5 withRows: 4.
	
	^ OrderedCollection with: floor1 with: floor2 with: floor3.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:28:17'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:28:17'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:28:17'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:28:36' prior: 50580822!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	"game := self validGame."
	
	self assert: 1 equals: 1.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:28:40'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:29:02' prior: 50581126!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := self validGame.
	
	self assert: 1 equals: 1.! !
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 21:29:29' prior: 50577603!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.
	
	^ self new initializeWithFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint! !

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:47'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:48'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors players'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:49'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors players stairs'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:50'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors players stairs slides'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:50'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors players stairs slides startingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #LaddersAndSlides3D category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:30:51'!
Object subclass: #LaddersAndSlides3D
	instanceVariableNames: 'floors players stairs slides startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!LaddersAndSlides3D methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:30:45'!
initializeWithFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	floors := aCollectionOfFloors.
	players := aQuantityOfPlayers.
	stairs := aCollectionOfStairs.
	slides := aCollectionOfSlides.
	startingPoint := aStartingPoint.
	finishingPoint := aFinishingPoint.
	! !

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:30:56'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:30:56'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:31:14' prior: 50574715!
validStairs

	| stair1 stair2 |
	stair1 := Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2.
	stair2 := Stair fromFloor: 2 toFloor: 3 startingFrom: 2@3 to: 4@1.
	
	^ OrderedCollection with: stair1 with: stair2.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:31:15'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:31:15'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:31:15'!
ERROR!

----SNAPSHOT----(4 July 2022 21:31:23) CuisUniversity-5324.image priorSource: 7973815!

----SNAPSHOT----(4 July 2022 21:31:26) CuisUniversity-5324.image priorSource: 7991986!
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:31:46' prior: 50580435!
validGame

	^ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: 2@2
								finishingAt: 5@1
								! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:32:16' prior: 50580928!
validSlides

	| slide1 slide2 |
	slide1 := Slide fromFloor: 3 toFloor: 2 startingFrom: 2@1 to: 1@3.
	slide2 := Slide fromFloor: 2 toFloor: 1 startingFrom: 1@4 to: 7@3.
	
	^ OrderedCollection with: slide1 with: slide2.! !
!LaddersAndSlides3DTest methodsFor: 'test data' stamp: 'LZ 7/4/2022 21:32:28' prior: 50581312!
validStairs

	| stair1 stair2 |
	stair1 := Stair fromFloor: 1 toFloor: 2 startingFrom: 5@3 to: 3@2.
	stair2 := Stair fromFloor: 2 toFloor: 3 startingFrom: 2@3 to: 5@1.
	
	^ OrderedCollection with: stair1 with: stair2.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:32:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:32:30'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:32:30'!
ERROR!
!LaddersAndSlides3D class methodsFor: 'assertions' stamp: 'LZ 7/4/2022 21:34:25' prior: 50578587!
assertPosition: aPosition isOutOfBoundariesOf: aFloor

	^ (aPosition x < 1) 
		or: aPosition x > (aFloor columns)
		or: aPosition y < 1
		or: aPosition y > (aFloor rows)! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:34:26'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:34:26'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:34:26'!
ERROR!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:35:53' prior: 50581208!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: 2@2
								finishingAt: 5@1.
	
	self assert: 1 equals: 1.! !

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:35:55'!
ERROR!
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:37:12' prior: 50580691!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:38:28' prior: 50579835!
test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 0 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:38:33'!
FAILURE!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:38:33'!
FAILURE!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:38:40' prior: 50581633!
test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 0 startingFrom: 2@4 to: 3@1).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood  
		withMessageText: LaddersAndSlides3D shortcutFloorIsInvalidError ! !

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:40:39'!
PASSED!
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:40:46' prior: 50575873!
test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!LaddersAndSlides3DTest methodsFor: 'tests' stamp: 'LZ 7/4/2022 21:40:50' prior: 50581694!
test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition

	| startingPosition finalPosition slides |
	
	startingPosition := 2@2.
	finalPosition := 5@1.

	slides := OrderedCollection with: (Slide fromFloor: 3 toFloor: 2 startingFrom: finalPosition to: 3@2).
	
	self 
		should: [ LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: slides
								startingFrom: startingPosition
								finishingAt: finalPosition
								]
		raise: Error - MessageNotUnderstood 
		withMessageText: LaddersAndSlides3D thereCanNotBeShortcutsAtStartOrFinishPositionError! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:41:26' prior: 50580717!
finishingFloor

	self subclassResponsibility.! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:41:29' prior: 50580721!
finishingPosition

	self subclassResponsibility.! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:41:31' prior: 50580729!
startingFloor

	self subclassResponsibility.! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:41:35' prior: 50580733!
startingPosition

	self subclassResponsibility.! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:42:09' overrides: 50581742!
finishingFloor

	^ finishingFloor.! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:42:25' overrides: 50581747!
finishingPosition

	^ finishingPoint .! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:42:35' overrides: 50581752!
startingFloor

	^ startingFloor .! !
!Slide methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:42:44' overrides: 50581757!
startingPosition

	^ startingPoint .! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:43:03' overrides: 50581752!
startingFloor

	^ startingFloor ! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:43:10' overrides: 50581757!
startingPosition

	^ startingPoint ! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:43:20' overrides: 50581742!
finishingFloor

	^ finishingFloor ! !
!Stair methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:43:30' overrides: 50581747!
finishingPosition

	^ finishingPoint ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:43:32'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:43:32'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:43:32'!
ERROR!

!methodRemoval: Shortcut #initializeFromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:43:54'!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.!
!Slide methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:44:05'!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !
!Stair methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:44:19'!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:44:25'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:44:25'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:44:25'!
ERROR!

!methodRemoval: Slide class #fromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:44:37'!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.!

!methodRemoval: Stair class #fromFloor:toFloor:startingFrom:to: stamp: 'LZ 7/4/2022 21:44:44'!
fromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition

	^ self new initializeFromFloor: aFloorNumber toFloor: anotherFloorNumber startingFrom: aStartPosition to: aFinalPosition.!

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:44:48'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:44:48'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:44:48'!
ERROR!

Object subclass: #Shortcut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:02'!
Object subclass: #Shortcut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:12'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:13'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startingFloor finishingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:14'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startingFloor finishingFloor startingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:15'!
Shortcut subclass: #Slide
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Slide methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:45:10' prior: 50581884!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:21'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:22'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startingFloor finishingFloor'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:23'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startingFloor finishingFloor startingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:45:24'!
Shortcut subclass: #Stair
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!
!Stair methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:45:20' prior: 50581895!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	startingFloor := aStartingFloorNumber.
	finishingFloor := aFinishingFloorNumber.
	startingPoint := aStartPosition.
	finishingPoint := aFinalPosition.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:45:27'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:45:27'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:45:27'!
ERROR!
!Shortcut methodsFor: 'initialization' stamp: 'LZ 7/4/2022 21:46:10'!
initializeFromFloor: aStartingFloorNumber toFloor: aFinishingFloorNumber startingFrom: aStartPosition to: aFinalPosition

	self subclassResponsibility.! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:46:13'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:46:13'!
ERROR!

!testRun: #LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:46:13'!
ERROR!

!methodRemoval: LaddersAndSlides3DTest #test16PlayerShouldMoveCorrectlyAfterThrowingTheDice stamp: 'LZ 7/4/2022 21:46:31'!
test16PlayerShouldMoveCorrectlyAfterThrowingTheDice

	| game |
	
	game := LaddersAndSlides3D withFloors: self validFloors
							 	withQuantityOfPlayers: 3
								withStairs: self validStairs 
								withSlides: self validSlides
								startingFrom: 2@2
								finishingAt: 5@1.
	
	self assert: 1 equals: 1.!
!LaddersAndSlides3D class methodsFor: 'instance creation' stamp: 'LZ 7/4/2022 21:46:39' prior: 50581216!
withFloors: aCollectionOfFloors withQuantityOfPlayers: aQuantityOfPlayers withStairs: aCollectionOfStairs withSlides: aCollectionOfSlides startingFrom: aStartingPoint finishingAt: aFinishingPoint

	self assertAreValidSlides: aCollectionOfSlides andStairs: aCollectionOfStairs withFloors: aCollectionOfFloors startingFrom: aStartingPoint finishingAt: aFinishingPoint.
! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:46:41'!
PASSED!

Shortcut subclass: #Slide
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Slide category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:47:13'!
Shortcut subclass: #Slide
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Stair category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:47:19'!
Shortcut subclass: #Stair
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

Object subclass: #Shortcut
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!classDefinition: #Shortcut category: '2doParcial2022-1c' stamp: 'LZ 7/4/2022 21:47:25'!
Object subclass: #Shortcut
	instanceVariableNames: 'startingFloor finishingFloor startingPoint finishingPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: '2doParcial2022-1c'!

!methodRemoval: Slide #finishingFloor stamp: 'LZ 7/4/2022 21:47:43'!
finishingFloor

	^ finishingFloor.!

!methodRemoval: Slide #finishingPosition stamp: 'LZ 7/4/2022 21:47:43'!
finishingPosition

	^ finishingPoint .!

!methodRemoval: Slide #startingFloor stamp: 'LZ 7/4/2022 21:47:43'!
startingFloor

	^ startingFloor .!

!methodRemoval: Slide #startingPosition stamp: 'LZ 7/4/2022 21:47:43'!
startingPosition

	^ startingPoint .!

!methodRemoval: Stair #finishingFloor stamp: 'LZ 7/4/2022 21:47:49'!
finishingFloor

	^ finishingFloor !

!methodRemoval: Stair #finishingPosition stamp: 'LZ 7/4/2022 21:47:49'!
finishingPosition

	^ finishingPoint !

!methodRemoval: Stair #startingFloor stamp: 'LZ 7/4/2022 21:47:49'!
startingFloor

	^ startingFloor !

!methodRemoval: Stair #startingPosition stamp: 'LZ 7/4/2022 21:47:49'!
startingPosition

	^ startingPoint !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:48:00' prior: 50581742!
finishingFloor

	^ finishingFloor .! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:48:13' prior: 50581747!
finishingPosition

	^ finishingPoint ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:48:21' prior: 50581752!
startingFloor

	^ startingFloor ! !
!Shortcut methodsFor: 'accessing' stamp: 'LZ 7/4/2022 21:48:28' prior: 50581757!
startingPosition

	^ startingPoint ! !

!testRun: #LaddersAndSlides3DTest #test01ShouldRaiseWhenTryingToCreateGameWithoutStairs stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test02ShouldRaiseWhenTryingToCreateGameWithoutSlides stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test03ShouldRaiseWhenTryingToCreateGameWithAStairThatMatchesStartingPosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test04ShouldRaiseWhenTryingToCreateGameWithASlideThatMatchesFinishingPosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test05ShouldRaiseWhenTryingToCreateGameWithTwoStairsStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test06ShouldRaiseWhenTryingToCreateGameWithTwoSlidesStartingFromTheSamePosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test07ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test08ShouldRaiseWhenTryingToCreateGameWithAStairThatFinishesAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:48:30'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test09ShouldRaiseWhenTryingToCreateGameWithAStairThatStartFromAnInexistentFloor stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test10ShouldRaiseWhenTryingToCreateGameWithAStairThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test11ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsFromAnInexistentPosition stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test12ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentPosition stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test13ShouldRaiseWhenTryingToCreateGameWithASlideThatStartsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test14ShouldRaiseWhenTryingToCreateGameWithASlideThatEndsAtAnInexistentFloor stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

!testRun: #LaddersAndSlides3DTest #test15ShouldRaiseWhenTryingToCreateGameWithAStairThatStartsWhereASlideEnds stamp: 'LZ 7/4/2022 21:48:31'!
PASSED!

----SNAPSHOT----(4 July 2022 21:48:40) CuisUniversity-5324.image priorSource: 7992074!